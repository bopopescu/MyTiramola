[config]
## The installation directory
install_dir = /home/ubuntu/tiramola
## The type of API to call the cluster controller
cloud_api_type = EC2_OS
## The dir that contains the credentials downloaded from Eucalyptus Web frontend
euca_rc_dir = /home/ubuntu/.openstack
## The key pair name of the new instances
keypair_name = hmaster
## The location of the private key file
key_file = /home/ubuntu/.ssh/id_rsa
## Starting one master and one node originally 
initial_cluster_size = 4
## Maximum cluster size (cost considerations) 
max_cluster_size = 15
## The bucket that contains the emi to use. All dbs are installed in the /opt directory inside the image.
bucket_name = ded38fe1-afd6-4a11-946d-d17253a639f6
## The default size for instances. It has to be one of the possible flavors
instance_type = singles.1
possible_flavors = singles.1,doubles.1
## The name of the cluster
cluster_name = klolos-hadoop
## The template for instance hostnames 
hostname_template = klolos-nodes-
## Are we reconfiguring an existing cluster?
reconfigure = True
## Cluster type (supported types are: HBASE, CASSANDRA, RIAK)
cluster_type = HBASE
## Temporary database location
db_file = sqlite:////home/ubuntu/hbase.db 
#db_file = /home/ubuntu/hbase.db 
## Username in Openstack
username = klolos
## Location of YCSB binary, configuration file, output file and running time
ycsb_binary = /home/ubuntu/ycsb-0.3.0/bin/ycsb
workload_file = /home/ubuntu/tiramola/workload.cfg
ycsb_output = /tmp/ycsb.out
ycsb_max_time = 180
ycsb_clients = 15
## Location of the decision making configuration file
decision_making_file = /home/ubuntu/tiramola/decisionMaking.json
training_file = /home/ubuntu/tiramola/training.data

########## BASED ON LAMBDA AND LATENCY ################
## Average max throughput per server
serv_throughput = 3500
## Cost function that provides the state transition cost for the FSMDecisionMaker
trans_cost = 1
## The gain function of staying at a particular state. This in essense is a rate.
#gain =  max(0,((  min( max_throughput, inlambda) - max(0, (latency-2000)/1000.0)*max_throughput ) * 0.002 ) - (num_nodes * 0.4) )
## Rigged gain for rebalancing
## Force add nodes
gain =   num_nodes
## Force remove nodes
#gain =   -1 * num_nodes

########## BASED ON CPU ONLY ################
## Cost function that provides the state transition cost for the FSMDecisionMaker
#trans_cost = ((max_throughput * 0.0001) - (added_nodes * cpu))
## The gain function of staying at a particular state. This in essense is a rate.
#gain = ((num_nodes * cpu ) - (num_nodes * 40))

########## BASED ON LATENCY ################
## Cost function that provides the state transition cost for the FSMDecisionMaker
#trans_cost =   ((max_throughput * 0.002 * 0.9) + (added_nodes * 10000 * 0.002))
## The gain function of staying at a particular state. This in essense is a rate.
#gain = ((max_throughput * 0.002) - (num_nodes * 400) + (latency * max_throughput * 0.01))

[thresholds_add]
## Add the thresholds that the Coordinator will monitor and decide whether to add/remove nodes.
## The metrics that follow provide example setup.
#mem_free = low_1000000
#disk_free = low_%10
#load_five = high_0.4
#cpu_idle = low_60
#cpu_wio = low_5
#load_five = high_10

[thresholds_remove]
#mem_free = high_11000000
#load_five = low_1
#cpu_idle = high_85
#load_five = low_0

